---
import { projects } from '../data/projects';

const featuredProjects = projects.filter(project => project.featured);
const otherProjects = projects.filter(project => !project.featured);
---

<section id="projects" class="py-20 bg-gray-800/50">
  <div class="container mx-auto px-6">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-6">
        <span class="bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
          Mis Proyectos
        </span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-purple-400 to-cyan-400 mx-auto mb-8"></div>
      <p class="text-gray-300 text-lg max-w-2xl mx-auto">
        Algunos de los proyectos en los que he trabajado, desde aplicaciones web hasta plataformas completas
      </p>
    </div>

    <!-- Featured Projects -->
    <div class="mb-16">
      <h3 class="text-2xl font-semibold mb-8 text-center text-purple-400">Proyectos Destacados</h3>
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {featuredProjects.map((project) => (
          <div class="bg-gray-900/50 rounded-2xl overflow-hidden backdrop-blur-sm border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300 group hover:scale-105">
            <!-- Image with click to expand functionality -->
            <div class="h-48 bg-gradient-to-br from-purple-500/20 to-cyan-500/20 relative overflow-hidden cursor-pointer group/image">
              <div class="absolute inset-0 flex items-center justify-center">
                <img 
                  src={project.imagePreview || project.image} 
                  alt={project.title} 
                  class="w-full h-full object-cover transition-transform duration-300 group-hover/image:scale-110 project-image"
                  data-title={project.title}
                  data-category={project.category}
                  data-image-full={project.imageFull || project.image}
                  data-url={project.url}
                />
              </div>
              
              <!-- Overlay con efecto hover -->
              <div class="absolute inset-0 bg-black/0 group-hover/image:bg-black/20 transition-all duration-300 flex items-center justify-center">
                <div class="opacity-0 group-hover/image:opacity-100 transition-opacity duration-300 bg-black/50 rounded-full p-3">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
                  </svg>
                </div>
              </div>
              
              <!-- Categoría badge -->
              <div class="absolute top-4 right-4">
                <span class="bg-purple-500 text-white px-3 py-1 rounded-full text-sm">
                  {project.category}
                </span>
              </div>
              
              <!-- Indicador de click -->
              <div class="absolute bottom-4 left-4 opacity-0 group-hover/image:opacity-100 transition-opacity duration-300">
                <span class="bg-black/70 text-white px-2 py-1 rounded text-xs flex items-center">
                  <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                  Ver imagen completa
                </span>
              </div>
            </div>
            
            <div class="p-6">
              <h4 class="text-xl font-semibold mb-3 text-white group-hover:text-purple-400 transition-colors duration-300">
                {project.title}
              </h4>
              <p class="text-gray-300 mb-4 leading-relaxed">
                {project.description}
              </p>
              
              <!-- Technologies -->
              <div class="flex flex-wrap gap-2 mb-4">
                {project.technologies.map((tech) => (
                  <span class="bg-gray-700/50 text-cyan-400 px-2 py-1 rounded text-sm">
                    {tech}
                  </span>
                ))}
              </div>
              
              <!-- Links -->
              <div class="flex gap-3">
                <a 
                  href={project.url} 
                  target="_blank"
                  class="flex items-center text-purple-400 hover:text-purple-300 transition-colors duration-300"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                  Ver Proyecto
                </a>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Other Projects -->
    <div>
      <h3 class="text-2xl font-semibold mb-8 text-center text-cyan-400">Otros Proyectos</h3>
      <div class="grid md:grid-cols-2 gap-6">
        {otherProjects.map((project) => (
          <div class="bg-gray-900/30 p-6 rounded-xl border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300 hover:bg-gray-800/50">
            <div class="flex items-start justify-between mb-4">
              <h4 class="text-lg font-semibold text-white">{project.title}</h4>
              <span class="bg-cyan-500/20 text-cyan-400 px-2 py-1 rounded text-sm">
                {project.category}
              </span>
            </div>
            
            <p class="text-gray-300 mb-4">
              {project.description}
            </p>
            
            <!-- Technologies -->
            <div class="flex flex-wrap gap-2 mb-4">
              {project.technologies.map((tech) => (
                <span class="bg-gray-700/50 text-gray-300 px-2 py-1 rounded text-sm">
                  {tech}
                </span>
              ))}
            </div>
            
            <!-- Link -->
            <a 
              href={project.url} 
              target="_blank"
              class="inline-flex items-center text-cyan-400 hover:text-cyan-300 transition-colors duration-300"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
              Ver Proyecto
            </a>
          </div>
        ))}
      </div>
    </div>

    <!-- Call to Action -->
    <div class="text-center mt-16">
      <div class="bg-gradient-to-r from-purple-500/10 to-cyan-500/10 p-8 rounded-2xl border border-gray-700/50">
        <h3 class="text-2xl font-semibold mb-4 text-white">¿Tienes un proyecto en mente?</h3>
        <p class="text-gray-300 mb-6 max-w-2xl mx-auto">
          Estoy siempre abierto a discutir nuevas oportunidades y proyectos interesantes. 
          ¡Hablemos sobre cómo puedo ayudarte!
        </p>
        <a 
          href="#contact" 
          class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-500 to-cyan-500 hover:from-purple-600 hover:to-cyan-600 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          Conversemos
        </a>
      </div>
    </div>
  </div>
</section>

<!-- Modal de imagen integrado -->
<div 
  id="image-modal" 
  class="fixed inset-0 bg-black/80 backdrop-blur-sm z-[70] hidden items-center justify-center p-4"
  style="display: none;"
>
  <!-- Contenedor del modal -->
  <div class="relative max-w-6xl max-h-[90vh] w-full">
    <!-- Botón cerrar -->
    <button
      id="close-image-modal"
      class="absolute -top-12 right-0 text-white/80 hover:text-white bg-black/50 hover:bg-black/70 p-2 rounded-full transition-all duration-200 z-10"
      title="Cerrar (Esc)"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Contenido del modal -->
    <div class="bg-gray-900/95 rounded-xl border border-gray-700/50 overflow-hidden backdrop-blur-sm">
      <!-- Header con información del proyecto -->
      <div class="p-4 border-b border-gray-700/50">
        <h3 id="modal-project-title" class="text-xl font-semibold text-white mb-1"></h3>
        <p id="modal-project-category" class="text-purple-400 text-sm"></p>
      </div>

      <!-- Imagen -->
      <div class="relative flex items-center justify-center bg-gray-800/50">
        <img
          id="modal-image"
          src=""
          alt=""
          class="max-w-full max-h-[70vh] object-contain"
          style="max-height: 70vh;"
        />
        <!-- Loading spinner -->
        <div id="modal-loading" class="absolute inset-0 flex items-center justify-center bg-gray-800/50">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
        </div>
      </div>

      <!-- Footer con acciones -->
      <div class="p-4 border-t border-gray-700/50 flex items-center justify-between">
        <!-- Información adicional -->
        <div class="flex items-center space-x-4">
          <span class="text-gray-400 text-sm">Haz clic fuera de la imagen para cerrar</span>
        </div>

        <!-- Botones de acción -->
        <div class="flex items-center space-x-3">
          <!-- Botón ver proyecto -->
          <a
            id="modal-project-link"
            href=""
            target="_blank"
            class="hidden items-center px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white text-sm rounded-lg transition-colors duration-200"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
            </svg>
            Ver Proyecto
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Animaciones para el modal */
  @keyframes modal-fade-in {
    0% { opacity: 0; }
    100% { opacity: 1; }
  }

  @keyframes modal-scale-in {
    0% {
      opacity: 0;
      transform: scale(0.9) translateY(20px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  .modal-show {
    animation: modal-fade-in 0.2s ease-out;
  }

  .modal-content-show {
    animation: modal-scale-in 0.3s ease-out;
  }

  /* Prevenir scroll del body cuando el modal está abierto */
  body.modal-open {
    overflow: hidden;
  }
</style>

<script>
  // Variables del modal
  let imageModal: HTMLElement | null = null;
  let modalImage: HTMLImageElement | null = null;
  let modalLoading: HTMLElement | null = null;
  let modalProjectTitle: HTMLElement | null = null;
  let modalProjectCategory: HTMLElement | null = null;
  let modalProjectLink: HTMLAnchorElement | null = null;
  let closeModalBtn: HTMLElement | null = null;

  // Función para abrir el modal
  function openImageModal(projectData: {
    title: string;
    category: string;
    imageFull: string;
    url: string;
  }) {
    console.log('Intentando abrir modal con:', projectData);
    
    if (!imageModal || !modalImage || !modalLoading) {
      console.error('Elementos del modal no encontrados');
      return;
    }

    // Actualizar contenido del modal
    if (modalProjectTitle) modalProjectTitle.textContent = projectData.title;
    if (modalProjectCategory) modalProjectCategory.textContent = projectData.category;
    
    // Configurar link del proyecto
    if (modalProjectLink) {
      modalProjectLink.href = projectData.url;
      modalProjectLink.classList.remove('hidden');
      modalProjectLink.classList.add('flex');
    }

    // Mostrar loading y ocultar imagen
    modalLoading.classList.remove('hidden');
    modalImage.style.opacity = '0';

    // Cargar nueva imagen
    modalImage.src = projectData.imageFull;
    modalImage.alt = projectData.title;

    // Mostrar modal
    imageModal.classList.remove('hidden');
    imageModal.style.display = 'flex';
    imageModal.classList.add('modal-show');

    // Agregar clase al body para prevenir scroll
    document.body.classList.add('modal-open');

    console.log('Modal debería estar abierto ahora');
  }

  // Función para cerrar el modal
  function closeImageModal() {
    if (!imageModal) return;

    // Ocultar modal
    imageModal.classList.add('hidden');
    imageModal.style.display = 'none';
    imageModal.classList.remove('modal-show');

    // Remover clase del body
    document.body.classList.remove('modal-open');

    // Limpiar imagen
    if (modalImage) {
      modalImage.src = '';
      modalImage.style.opacity = '0';
    }

    console.log('Modal cerrado');
  }

  // Inicializar event listeners para las imágenes de proyectos
  function initProjectImages() {
    console.log('Inicializando event listeners para imágenes de proyectos');
    
    const projectImages = document.querySelectorAll('.project-image');
    console.log('Imágenes de proyecto encontradas:', projectImages.length);
    
    projectImages.forEach((img, index) => {
      console.log(`Configurando evento para imagen ${index + 1}`);
      
      img.addEventListener('click', function(this: HTMLImageElement, e) {
        e.preventDefault();
        console.log('Click en imagen detectado');
        
        const title = this.getAttribute('data-title');
        const category = this.getAttribute('data-category');
        const imageFull = this.getAttribute('data-image-full');
        const url = this.getAttribute('data-url');
        
        console.log('Datos extraídos:', { title, category, imageFull, url });
        
        if (title && category && imageFull && url) {
          openImageModal({
            title: title,
            category: category,
            imageFull: imageFull,
            url: url
          });
        } else {
          console.error('Faltan datos del proyecto:', { title, category, imageFull, url });
        }
      });
    });
  }

  // Inicializar el modal
  function initImageModal() {
    console.log('Inicializando modal de imagen');
    
    // Obtener elementos del DOM
    imageModal = document.getElementById('image-modal');
    modalImage = document.getElementById('modal-image') as HTMLImageElement;
    modalLoading = document.getElementById('modal-loading');
    modalProjectTitle = document.getElementById('modal-project-title');
    modalProjectCategory = document.getElementById('modal-project-category');
    modalProjectLink = document.getElementById('modal-project-link') as HTMLAnchorElement;
    closeModalBtn = document.getElementById('close-image-modal');

    console.log('Elementos del modal:', {
      imageModal: !!imageModal,
      modalImage: !!modalImage,
      modalLoading: !!modalLoading,
      modalProjectTitle: !!modalProjectTitle,
      modalProjectCategory: !!modalProjectCategory,
      modalProjectLink: !!modalProjectLink,
      closeModalBtn: !!closeModalBtn
    });

    if (!imageModal) {
      console.error('Modal no encontrado');
      return;
    }

    // Event listeners del modal
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeImageModal);
    }

    // Cerrar modal al hacer clic fuera de la imagen
    imageModal.addEventListener('click', (e) => {
      if (e.target === imageModal) {
        closeImageModal();
      }
    });

    // Cerrar modal con la tecla Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !imageModal!.classList.contains('hidden')) {
        closeImageModal();
      }
    });

    // Manejar carga de imagen
    if (modalImage) {
      modalImage.addEventListener('load', () => {
        if (modalLoading) {
          modalLoading.classList.add('hidden');
        }
        modalImage!.style.opacity = '1';
        modalImage!.style.transition = 'opacity 0.3s ease';
      });

      modalImage.addEventListener('error', () => {
        if (modalLoading) {
          modalLoading.innerHTML = '<p class="text-red-400">Error cargando la imagen</p>';
        }
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM cargado, inicializando componentes');
    initImageModal();
    initProjectImages();
  });
</script>
