---
// Chatbot component with N8N integration
---

<div id="chatbot-container" class="fixed bottom-6 right-6 z-50">
  <!-- BotÃ³n de toggle -->
  <button
    id="chat-toggle"
    class="bg-gradient-to-r from-purple-500 to-cyan-500 text-white p-4 rounded-full shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 flex items-center justify-center cursor-pointer relative"
  >
    <!-- Indicador de notificaciÃ³n -->
    <div
      id="notification-ping"
      class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full animate-ping hidden"
    >
    </div>
    <div
      id="notification-dot"
      class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full hidden"
    >
    </div>

    <svg
      id="chat-icon"
      class="w-7 h-7"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <!-- Chat Bubble Base -->
      <path
        d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2v10z"
        stroke-width="1.5"></path>
      <!-- Robot Face Inside Chat -->
      <!-- Robot Eyes -->
      <circle cx="10" cy="9" r="1.2" fill="currentColor"></circle>
      <circle cx="14" cy="9" r="1.2" fill="currentColor"></circle>
      <!-- Robot Mouth/Speaker -->
      <rect
        x="10.5"
        y="11.5"
        width="3"
        height="1.5"
        rx="0.5"
        stroke-width="1"
        fill="currentColor"></rect>
      <!-- Robot Antenna/Signal -->
      <path d="M12 6.5v-1.5" stroke-width="1.5" stroke-linecap="round"></path>
      <circle cx="12" cy="4.5" r="0.8" fill="currentColor"></circle>
      <!-- Tech Details -->
      <path d="M8 11h1.5" stroke-width="1" stroke-linecap="round"></path>
      <path d="M14.5 11h1.5" stroke-width="1" stroke-linecap="round"></path>
    </svg>
    <svg
      id="close-icon"
      class="w-6 h-6 hidden"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>

  <!-- Ventana del chat -->
  <div
    id="chat-window"
    class="hidden absolute bottom-16 right-0 w-80 h-96 bg-gray-800 rounded-lg shadow-2xl border border-gray-700 overflow-hidden"
    style="display: none; flex-direction: column;"
  >
    <!-- Header -->
    <div class="bg-gradient-to-r from-purple-500 to-cyan-500 p-4">
      <h3 class="text-white font-semibold">ðŸ’¬ Asistente Wilson</h3>
      <p class="text-purple-100 text-sm">Â¡PregÃºntame sobre mi experiencia!</p>
    </div>

    <!-- Mensajes -->
    <div
      id="chat-messages"
      class="flex-1 p-4 overflow-y-auto space-y-3 bg-gray-900"
    >
      <div class="bg-gray-700 p-3 rounded-lg max-w-xs animate-slide-in">
        <p class="text-gray-200 text-sm">
          Â¡Hola! Soy el asistente de Wilson. Â¿En quÃ© puedo ayudarte?
        </p>
        <div class="text-xs text-gray-400 mt-1">PregÃºntame sobre:</div>
        <ul class="text-xs text-gray-300 mt-1 ml-2">
          <li>â€¢ Experiencia laboral</li>
          <li>â€¢ Habilidades tÃ©cnicas</li>
          <li>â€¢ Proyectos realizados</li>
          <li>â€¢ Contacto directo</li>
        </ul>
      </div>
    </div>

    <!-- Input -->
    <div class="p-4 border-t border-gray-700 bg-gray-800">
      <div class="flex space-x-2">
        <input
          id="chat-input"
          type="text"
          placeholder="Escribe tu mensaje..."
          class="flex-1 bg-gray-700 text-white p-2 rounded-lg border border-gray-600 focus:border-purple-500 focus:outline-none text-sm"
          maxlength="200"
        />
        <button
          id="send-btn"
          class="bg-purple-500 text-white p-2 rounded-lg hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed cursor-pointer"
        >
          <svg
            class="w-5 h-5 transform rotate-90"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </div>
      <div
        id="typing-indicator"
        class="hidden text-xs text-gray-400 mt-1 animate-pulse"
      >
        Wilson estÃ¡ escribiendo...
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes slide-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes bounce-attention {
    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateY(0) scale(1);
    }
    40% {
      transform: translateY(-10px) scale(1.05);
    }
    60% {
      transform: translateY(-5px) scale(1.02);
    }
  }

  @keyframes glow-pulse {
    0%,
    100% {
      box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
    }
    50% {
      box-shadow:
        0 4px 20px rgba(139, 92, 246, 0.6),
        0 0 30px rgba(139, 92, 246, 0.4);
    }
  }

  .animate-slide-in {
    animation: slide-in 0.3s ease-out;
  }

  .bounce-attention {
    animation:
      bounce-attention 2s ease-in-out 3,
      glow-pulse 2s ease-in-out 3;
  }

  .notification-active {
    animation: glow-pulse 3s ease-in-out infinite;
  }

  #chat-messages::-webkit-scrollbar {
    width: 4px;
  }

  #chat-messages::-webkit-scrollbar-track {
    background: #374151;
  }

  #chat-messages::-webkit-scrollbar-thumb {
    background: #6b7280;
    border-radius: 2px;
  }
</style>

<script>
  // ConfiguraciÃ³n del chatbot
  const CONFIG = {
    N8N_WEBHOOK_URL: 'https://tu-n8n-instance.com/webhook/chatbot', // Reemplaza con tu URL real
    MAX_MESSAGES: 20,
    TYPING_DELAY: 1000,
    SCROLL_THRESHOLD: 500, // PÃ­xeles de scroll antes de mostrar notificaciÃ³n
    NOTIFICATION_SOUND: '/sounds/notification.wav', // Archivo de sonido de notificaciÃ³n
    SOUND_VOLUME: 1, // Volumen del sonido (0.0 - 1.0)
    ERROR_MESSAGE:
      'Lo siento, no pude procesar tu mensaje en este momento. Â¿PodrÃ­as contactarme directamente a wilsondelcanto.redes@gmail.com?',
  };

  // Elementos del DOM
  const chatToggle = document.getElementById('chat-toggle');
  const chatWindow = document.getElementById('chat-window');
  const chatInput = document.getElementById('chat-input');
  const sendBtn = document.getElementById('send-btn');
  const chatMessages = document.getElementById('chat-messages');
  const typingIndicator = document.getElementById('typing-indicator');
  const chatIcon = document.getElementById('chat-icon');
  const closeIcon = document.getElementById('close-icon');
  const notificationPing = document.getElementById('notification-ping');
  const notificationDot = document.getElementById('notification-dot');

  // Estado del chat y notificaciones
  let isOpen = false;
  let notificationShown = false; // Se resetea en cada carga de pÃ¡gina (cada visita)
  let scrollThreshold = CONFIG.SCROLL_THRESHOLD;
  let messageHistory: Array<{
    text: string;
    sender: 'user' | 'bot';
    timestamp: number;
  }> = [];

  // InicializaciÃ³n
  function initChat() {
    chatToggle?.addEventListener('click', toggleChat);
    sendBtn?.addEventListener('click', sendMessage);
    chatInput?.addEventListener('keypress', e => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // Inicializar sistema de notificaciones
    initNotificationSystem();

    // Focus en input cuando se abre
    const observer = new MutationObserver(() => {
      if (!chatWindow?.classList.contains('hidden')) {
        chatInput?.focus();
      }
    });
    if (chatWindow) {
      observer.observe(chatWindow, {
        attributes: true,
        attributeFilter: ['class'],
      });
    }
  }

  // Sistema de notificaciones por scroll
  function initNotificationSystem() {
    if (notificationShown) return;

    let scrollTimer: ReturnType<typeof setTimeout>;

    // La notificaciÃ³n se activa UNA VEZ por visita/sesiÃ³n
    // Se resetea automÃ¡ticamente al recargar o reabrir la pÃ¡gina
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimer);
      scrollTimer = setTimeout(() => {
        const scrollY = window.scrollY;

        if (scrollY > scrollThreshold && !notificationShown && !isOpen) {
          showChatNotification();
        }
      }, 100);
    });
  }
  function showChatNotification() {
    if (notificationShown || isOpen) return;

    // Mostrar indicadores visuales
    notificationPing?.classList.remove('hidden');
    notificationDot?.classList.remove('hidden');

    // Agregar animaciÃ³n de bounce al botÃ³n
    chatToggle?.classList.add('bounce-attention');

    // Reproducir sonido suave
    playNotificationSound();

    // Marcar como mostrada (solo para esta sesiÃ³n/visita)
    // Se resetea automÃ¡ticamente al recargar la pÃ¡gina
    notificationShown = true;

    // Remover animaciÃ³n despuÃ©s de 6 segundos
    setTimeout(() => {
      chatToggle?.classList.remove('bounce-attention');
      chatToggle?.classList.add('notification-active');
    }, 6000);
  }

  function hideNotification() {
    notificationPing?.classList.add('hidden');
    notificationDot?.classList.add('hidden');
    chatToggle?.classList.remove('notification-active', 'bounce-attention');
  }

  function playNotificationSound() {
    try {
      // Crear elemento de audio para reproducir el archivo
      const audio = new Audio(CONFIG.NOTIFICATION_SOUND);

      // Configurar volumen desde la configuraciÃ³n
      audio.volume = CONFIG.SOUND_VOLUME;

      // Configurar para reproducir solo una vez
      audio.loop = false;

      // Reproducir el sonido
      audio.play().catch(error => {
        console.log('No se pudo reproducir el audio:', error);
        // Fallback al sonido generado por Web Audio API
        playGeneratedSound();
      });
    } catch (error) {
      console.log('Audio no disponible:', error);
      // Fallback al sonido generado
      playGeneratedSound();
    }
  }

  function playGeneratedSound() {
    // FunciÃ³n de respaldo usando Web Audio API (sonido generado)
    try {
      const audioContext = new (window.AudioContext ||
        (window as any).webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      // Configurar sonido suave y agradable
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      oscillator.frequency.exponentialRampToValueAtTime(
        1000,
        audioContext.currentTime + 0.1
      );

      gainNode.gain.setValueAtTime(0, audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(
        0.1,
        audioContext.currentTime + 0.05
      );
      gainNode.gain.exponentialRampToValueAtTime(
        0.001,
        audioContext.currentTime + 0.3
      );

      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.3);
    } catch (error) {
      console.log('Web Audio API no disponible:', error);
    }
  }

  function toggleChat() {
    isOpen = !isOpen;
    const window = chatWindow as HTMLElement;

    if (isOpen) {
      window.classList.remove('hidden');
      window.style.display = 'flex';
      chatIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
      (chatInput as HTMLInputElement)?.focus();

      // Ocultar notificaciÃ³n al abrir el chat
      hideNotification();
    } else {
      window.classList.add('hidden');
      window.style.display = 'none';
      chatIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    }
  }

  async function sendMessage() {
    const input = chatInput as HTMLInputElement;
    const button = sendBtn as HTMLButtonElement;
    const message = input?.value.trim();
    if (!message || button?.disabled) return;

    // Deshabilitar input
    setInputState(false);

    // Agregar mensaje del usuario
    addMessage(message, 'user');
    input.value = '';

    // Mostrar indicador de escritura
    showTypingIndicator();

    try {
      // Enviar a N8N webhook
      const response = await fetch(CONFIG.N8N_WEBHOOK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          timestamp: new Date().toISOString(),
          userId: getOrCreateUserId(),
          history: messageHistory.slice(-5), // Ãšltimos 5 mensajes para contexto
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();

      // Simular delay de escritura
      await delay(CONFIG.TYPING_DELAY);

      // Agregar respuesta del bot
      addMessage(data.response || CONFIG.ERROR_MESSAGE, 'bot');
    } catch (error) {
      console.error('Error de chat:', error);
      await delay(CONFIG.TYPING_DELAY);
      addMessage(CONFIG.ERROR_MESSAGE, 'bot');
    } finally {
      hideTypingIndicator();
      setInputState(true);
      (chatInput as HTMLInputElement)?.focus();
    }
  }

  function addMessage(text: string, sender: 'user' | 'bot') {
    if (!chatMessages) return;

    const messageDiv = document.createElement('div');
    messageDiv.className = `${sender === 'user' ? 'ml-8 bg-purple-500 self-end' : 'mr-8 bg-gray-700'} p-3 rounded-lg max-w-xs animate-slide-in`;

    const messageText = document.createElement('p');
    messageText.className = 'text-white text-sm';
    messageText.textContent = text;

    const timestamp = document.createElement('div');
    timestamp.className = 'text-xs opacity-75 mt-1';
    timestamp.textContent = new Date().toLocaleTimeString('es-CL', {
      hour: '2-digit',
      minute: '2-digit',
    });

    messageDiv.appendChild(messageText);
    messageDiv.appendChild(timestamp);
    chatMessages.appendChild(messageDiv);

    // Guardar en historial
    messageHistory.push({ text, sender, timestamp: Date.now() });

    // Limitar historial
    if (messageHistory.length > CONFIG.MAX_MESSAGES) {
      messageHistory = messageHistory.slice(-CONFIG.MAX_MESSAGES);
    }

    // Scroll al final
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function showTypingIndicator() {
    typingIndicator?.classList.remove('hidden');
  }

  function hideTypingIndicator() {
    typingIndicator?.classList.add('hidden');
  }

  function setInputState(enabled: boolean) {
    const input = chatInput as HTMLInputElement;
    const button = sendBtn as HTMLButtonElement;
    if (input) input.disabled = !enabled;
    if (button) button.disabled = !enabled;
  }

  function getOrCreateUserId(): string {
    let userId = localStorage.getItem('chatbot-user-id');
    if (!userId) {
      userId =
        'visitor-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
      localStorage.setItem('chatbot-user-id', userId);
    }
    return userId;
  }

  function delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Inicializar cuando el DOM estÃ© listo
  document.addEventListener('DOMContentLoaded', initChat);
</script>
