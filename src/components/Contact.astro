---
// Contact section component
---

<section id="contact" class="py-20 bg-gray-900">
  <div class="container mx-auto px-6">
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold mb-6">
        <span
          class="bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent"
        >
          Contacto
        </span>
      </h2>
      <div
        class="w-24 h-1 bg-gradient-to-r from-purple-400 to-cyan-400 mx-auto mb-8"
      >
      </div>
      <p class="text-gray-300 text-lg max-w-2xl mx-auto">
        ¿Quieres contactarme? ¡No dudes en hacerlo! Estoy siempre abierto a
        nuevas oportunidades y conversaciones.
      </p>
    </div>

    <div class="grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto">
      <!-- Contact Info -->
      <div class="space-y-8">
        <div
          class="bg-gray-800/50 p-8 rounded-2xl backdrop-blur-sm border border-gray-700/50"
        >
          <h3 class="text-2xl font-semibold mb-6 text-purple-400">
            Información de Contacto
          </h3>

          <div class="space-y-6">
            <!-- Email -->
            <div class="flex items-center space-x-4">
              <div
                class="bg-gradient-to-r from-purple-500 to-cyan-500 p-3 rounded-lg"
              >
                <svg
                  class="w-6 h-6 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  ></path>
                </svg>
              </div>
              <div>
                <p class="text-white font-medium">Email</p>
                <a
                  href="mailto:wilson@wilsondelcanto.dev"
                  class="text-cyan-400 hover:text-cyan-300 transition-colors duration-300"
                >
                  wilsondelcanto.redes@gmail.com
                </a>
              </div>
            </div>

            <!-- Location -->
            <div class="flex items-center space-x-4">
              <div
                class="bg-gradient-to-r from-cyan-500 to-purple-500 p-3 rounded-lg"
              >
                <svg
                  class="w-6 h-6 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                  ></path>
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
              </div>
              <div>
                <p class="text-white font-medium">Ubicación</p>
                <p class="text-gray-300">Coquimbo, Chile</p>
              </div>
            </div>

            <!-- WhatsApp -->
            <div class="flex items-center space-x-4">
              <div
                class="bg-gradient-to-r from-green-500 to-emerald-500 p-3 rounded-lg"
              >
                <svg
                  class="w-6 h-6 text-white"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"
                  ></path>
                </svg>
              </div>
              <div>
                <p class="text-white font-medium">WhatsApp</p>
                <a
                  href="https://wa.me/56954205188"
                  target="_blank"
                  class="text-green-400 hover:text-green-300 transition-colors duration-300"
                >
                  +56 9 5420 5188
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Social Links -->
        <div
          class="bg-gray-800/50 p-8 rounded-2xl backdrop-blur-sm border border-gray-700/50"
        >
          <h3 class="text-2xl font-semibold mb-6 text-cyan-400">
            Redes Sociales
          </h3>

          <div class="grid grid-cols-2 gap-4">
            <a
              href="https://www.linkedin.com/in/wilsondelcanto"
              target="_blank"
              class="flex items-center space-x-3 p-3 bg-gray-700/50 rounded-lg hover:bg-blue-600/20 hover:border-blue-500/50 border border-transparent transition-all duration-300 group"
            >
              <svg
                class="w-6 h-6 text-blue-400 group-hover:scale-110 transition-transform duration-300"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
                ></path>
              </svg>
              <span
                class="text-white group-hover:text-blue-400 transition-colors duration-300"
                >LinkedIn</span
              >
            </a>

            <a
              href="https://github.com/wdelcant"
              target="_blank"
              class="flex items-center space-x-3 p-3 bg-gray-700/50 rounded-lg hover:bg-gray-600/20 hover:border-gray-400/50 border border-transparent transition-all duration-300 group"
            >
              <svg
                class="w-6 h-6 text-gray-400 group-hover:scale-110 transition-transform duration-300"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                ></path>
              </svg>
              <span
                class="text-white group-hover:text-gray-400 transition-colors duration-300"
                >GitHub</span
              >
            </a>

            <a
              href="https://wa.me/56954205188"
              target="_blank"
              class="flex items-center space-x-3 p-3 bg-gray-700/50 rounded-lg hover:bg-green-600/20 hover:border-green-500/50 border border-transparent transition-all duration-300 group"
            >
              <svg
                class="w-6 h-6 text-green-400 group-hover:scale-110 transition-transform duration-300"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"
                ></path>
              </svg>
              <span
                class="text-white group-hover:text-green-400 transition-colors duration-300"
                >WhatsApp</span
              >
            </a>

            <a
              href="https://t.me/wilsondelcanto"
              target="_blank"
              class="flex items-center space-x-3 p-3 bg-gray-700/50 rounded-lg hover:bg-blue-500/20 hover:border-blue-400/50 border border-transparent transition-all duration-300 group"
            >
              <svg
                class="w-6 h-6 text-blue-400 group-hover:scale-110 transition-transform duration-300"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"
                ></path>
              </svg>
              <span
                class="text-white group-hover:text-blue-400 transition-colors duration-300"
                >Telegram</span
              >
            </a>
          </div>
        </div>
      </div>

      <!-- Contact Form -->
      <div
        class="bg-gray-800/50 p-8 rounded-2xl backdrop-blur-sm border border-gray-700/50"
      >
        <h3 class="text-2xl font-semibold mb-6 text-purple-400">
          Envíame un Mensaje
        </h3>

        <form id="contact-form" class="space-y-6 form-reset">
          <!-- Name -->
          <div>
            <label for="name" class="block text-white font-medium mb-2"
              >Nombre *</label
            >
            <input
              type="text"
              id="name"
              name="name"
              required
              pattern="^[a-zA-ZàáâäçèéêëìíîïñòóôöùúûüÀÁÂÄÇÈÉÊËÌÍÎÏÑÒÓÔÖÙÚÛÜ ]+$"
              title="El nombre solo acepta letras y espacios"
              class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 transition-all duration-300"
              placeholder="Tu nombre completo"
            />
          </div>

          <!-- Email -->
          <div>
            <label for="email" class="block text-white font-medium mb-2"
              >Email *</label
            >
            <input
              type="email"
              id="email"
              name="email"
              required
              pattern="^[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9]+(\.[a-z0-9]+)*(\.[a-z]{2,15})$"
              title="Ingresa un email válido"
              class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300"
              placeholder="tu@email.com"
            />
          </div>

          <!-- Phone -->
          <div>
            <label for="phone" class="block text-white font-medium mb-2"
              >Teléfono</label
            >
            <input
              type="tel"
              id="phone"
              name="phone"
              pattern="^\+[0-9]{10,15}$"
              title="Formato: +56999999999 (incluye código de país)"
              class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 focus:ring-2 focus:ring-purple-500/20 transition-all duration-300"
              placeholder="+56999999999"
            />
          </div>

          <!-- Message -->
          <div>
            <label for="message" class="block text-white font-medium mb-2"
              >Mensaje *</label
            >
            <textarea
              id="message"
              name="message"
              rows="5"
              required
              minlength="10"
              maxlength="500"
              title="El mensaje debe tener entre 10 y 500 caracteres"
              class="w-full px-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300 resize-none"
              placeholder="Cuéntame sobre tu proyecto o idea..."></textarea>
          </div>

          <!-- Submit Button -->
          <button
            type="submit"
            class="contact-form-button w-full px-6 py-4 bg-gradient-to-r from-purple-500 to-cyan-500 hover:from-purple-600 hover:to-cyan-600 text-white font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          >
            <span class="button-text">Enviar Mensaje</span>
            <svg
              class="w-5 h-5 loading-icon animate-spin hidden"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              ></path>
            </svg>
          </button>

          <!-- Form Response (will be managed by JavaScript) -->
          <div class="contact-form-response hidden mt-4 p-4 rounded-lg"></div>
          <div class="contact-form-loader hidden mt-4 text-center">
            <div
              class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-white"
            >
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
  // Contact form control with API integration
  // Basado en el código original funcional de formControl.js

  // Constante para document
  const d = document;

  // Configuración de FormSubmit
  const FORMSUBMIT_URL =
    'https://formsubmit.co/ajax/wilsondelcanto.redes@gmail.com';

  /**
   * Inicializa el control del formulario de contacto
   */
  function initContactForm() {
    console.log('Inicializando formulario de contacto...');

    const $form = d.querySelector('#contact-form');

    if (!$form) {
      console.log('Formulario de contacto no encontrado');
      return;
    }

    const $inputs = d.querySelectorAll('#contact-form [required]');

    // Crear spans de error para campos requeridos
    $inputs.forEach(element => {
      const input = element as HTMLInputElement | HTMLTextAreaElement;
      // Verificar si ya existe el span de error
      const existingError = d.getElementById(`error-${input.name}`);
      if (existingError) return;

      const $span = d.createElement('span');
      $span.id = `error-${input.name}`;
      $span.textContent = input.title || 'Este campo es requerido';
      $span.classList.add(
        'contact-form-error',
        'hidden',
        'text-red-400',
        'text-sm',
        'mt-1',
        'block'
      );
      input.parentElement?.appendChild($span);
    });

    // Validación en tiempo real - usando keyup como en el original
    d.addEventListener('keyup', e => {
      if (
        e.target &&
        (e.target as HTMLElement).matches('#contact-form [required]')
      ) {
        validateField(e.target as HTMLInputElement | HTMLTextAreaElement);
      }
    });

    // Manejo del envío del formulario
    $form.addEventListener('submit', handleFormSubmit);

    console.log('Formulario inicializado correctamente');
  }

  /**
   * Valida un campo individual - adaptado del código original
   * @param {HTMLInputElement | HTMLTextAreaElement} input - El campo a validar
   * @returns {boolean} - True si el campo es válido
   */
  function validateField(
    input: HTMLInputElement | HTMLTextAreaElement
  ): boolean {
    const pattern =
      ('pattern' in input ? input.pattern : '') || input.dataset.pattern;
    /** @type {HTMLSpanElement | null} */
    const errorSpan = d.getElementById(`error-${input.name}`);

    if (!errorSpan) return true;

    // Validación por patrón (igual que el original)
    if (pattern && input.value !== '') {
      const regex = new RegExp(pattern);
      if (!regex.exec(input.value)) {
        showFieldError(input, errorSpan);
        return false;
      } else {
        hideFieldError(input, errorSpan);
      }
    }

    // Validación para campos requeridos
    if (input.hasAttribute('required')) {
      if (input.value.trim() === '') {
        showFieldError(input, errorSpan);
        return false;
      } else {
        hideFieldError(input, errorSpan);
      }
    }

    return true;
  }

  /**
   * Muestra error en un campo
   * @param {HTMLInputElement | HTMLTextAreaElement} input - El campo de entrada
   * @param {HTMLSpanElement} errorSpan - El span del error
   */
  function showFieldError(
    input: HTMLInputElement | HTMLTextAreaElement,
    errorSpan: HTMLSpanElement
  ): void {
    input.classList.add(
      'border-red-500',
      'focus:border-red-500',
      'focus:ring-red-500/20'
    );
    input.classList.remove(
      'border-gray-600',
      'focus:border-purple-500',
      'focus:ring-purple-500/20',
      'focus:border-cyan-500',
      'focus:ring-cyan-500/20'
    );
    errorSpan.classList.remove('hidden');
  }

  /**
   * Oculta error en un campo
   * @param {HTMLInputElement | HTMLTextAreaElement} input - El campo de entrada
   * @param {HTMLSpanElement} errorSpan - El span del error
   */
  function hideFieldError(
    input: HTMLInputElement | HTMLTextAreaElement,
    errorSpan: HTMLSpanElement
  ): void {
    input.classList.remove(
      'border-red-500',
      'focus:border-red-500',
      'focus:ring-red-500/20'
    );
    input.classList.add('border-gray-600');

    // Restaurar colores originales según el tipo de campo
    if (input.name === 'email' || input.name === 'message') {
      input.classList.add('focus:border-cyan-500', 'focus:ring-cyan-500/20');
    } else {
      input.classList.add(
        'focus:border-purple-500',
        'focus:ring-purple-500/20'
      );
    }

    errorSpan.classList.add('hidden');
  }

  /**
   * Maneja el envío del formulario - basado en el código original
   * @param {Event} e - Evento de submit
   * @returns {Promise<void>}
   */
  async function handleFormSubmit(e: Event): Promise<void> {
    e.preventDefault();

    console.log('Procesando envío del formulario...');

    /** @type {HTMLFormElement} */
    const form = e.target as HTMLFormElement;
    /** @type {NodeListOf<HTMLInputElement | HTMLTextAreaElement>} */
    const $inputs = form.querySelectorAll('[required]') as NodeListOf<
      HTMLInputElement | HTMLTextAreaElement
    >;
    /** @type {HTMLButtonElement} */
    const submitButton = form.querySelector(
      'button[type="submit"]'
    ) as HTMLButtonElement;
    /** @type {HTMLSpanElement} */
    const buttonText = submitButton.querySelector(
      '.button-text'
    ) as HTMLSpanElement;
    /** @type {HTMLElement} */
    const loadingIcon = submitButton.querySelector(
      '.loading-icon'
    ) as HTMLElement;

    // Validar todos los campos
    let isValid = true;
    $inputs.forEach(element => {
      const input = element as HTMLInputElement | HTMLTextAreaElement;
      if (!validateField(input)) {
        isValid = false;
      }
    });

    if (!isValid) {
      showToast(
        'error',
        '⚠️ Por favor, corrige los errores en el formulario antes de enviar.'
      );
      return;
    }

    // Mostrar estado de carga
    setLoadingState(submitButton, buttonText, loadingIcon, true);

    try {
      // Preparar datos del formulario - igual que el original
      const formData = new FormData(form);

      // Añadir campos ocultos para FormSubmit
      formData.append('_subject', 'Nuevo mensaje desde el portfolio de Wilson');
      formData.append('_captcha', 'false');
      formData.append('_template', 'table');

      console.log('Enviando datos a FormSubmit...');

      // Enviar a FormSubmit - igual que el original
      const response = await fetch(FORMSUBMIT_URL, {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();
      console.log('Respuesta de FormSubmit:', result);

      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }

      // Éxito - igual que el original
      showToast(
        'success',
        '¡Mensaje enviado correctamente! 🚀 Te responderé pronto.'
      );
      form.reset();

      // Limpiar errores visuales
      $inputs.forEach(element => {
        const input = element as HTMLInputElement | HTMLTextAreaElement;
        /** @type {HTMLSpanElement | null} */
        const errorSpan = d.getElementById(
          `error-${input.name}`
        ) as HTMLSpanElement;
        if (errorSpan) {
          hideFieldError(input, errorSpan);
        }
      });
    } catch (error) {
      console.error('Error al enviar formulario:', error);
      showToast(
        'error',
        '❌ Hubo un problema al enviar el mensaje. Por favor, intenta nuevamente o contáctame por WhatsApp.'
      );
    } finally {
      // Restaurar estado del botón
      setLoadingState(submitButton, buttonText, loadingIcon, false);
    }
  }

  /**
   * Controla el estado de carga del botón
   * @param {HTMLButtonElement} button - El botón de submit
   * @param {HTMLElement} textElement - El elemento de texto del botón
   * @param {HTMLElement} iconElement - El elemento del icono de carga
   * @param {boolean} isLoading - Si está en estado de carga
   */
  function setLoadingState(
    button: HTMLButtonElement,
    textElement: HTMLElement,
    iconElement: HTMLElement,
    isLoading: boolean
  ): void {
    if (isLoading) {
      button.disabled = true;
      textElement.classList.add('hidden'); // Ocultar texto completamente
      iconElement.classList.remove('hidden');
      button.classList.add('opacity-75');
    } else {
      button.disabled = false;
      textElement.classList.remove('hidden'); // Mostrar texto nuevamente
      textElement.textContent = 'Enviar Mensaje';
      iconElement.classList.add('hidden');
      button.classList.remove('opacity-75');
    }
  }

  /**
   * Muestra notificaciones tipo toast personalizadas (estilo Sonner)
   * @param {'success' | 'error' | 'info'} type - Tipo de notificación
   * @param {string} message - Mensaje a mostrar
   */
  function showToast(
    type: 'success' | 'error' | 'info',
    message: string
  ): void {
    // Crear contenedor de notificaciones si no existe
    /** @type {HTMLDivElement | null} */
    let toastContainer = document.getElementById('toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.id = 'toast-container';
      toastContainer.className =
        'fixed top-4 right-4 z-50 flex flex-col gap-2 pointer-events-none max-w-sm';
      document.body.appendChild(toastContainer);
    }

    // Crear el toast
    /** @type {HTMLDivElement} */
    const toast = document.createElement('div');

    // Configuración por tipo de notificación
    const config = {
      success: {
        bgColor: 'bg-green-500/10 border-green-500/20',
        icon: `<svg class="w-5 h-5 text-green-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>`,
        textColor: 'text-green-400',
      },
      error: {
        bgColor: 'bg-red-500/10 border-red-500/20',
        icon: `<svg class="w-5 h-5 text-red-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>`,
        textColor: 'text-red-400',
      },
      info: {
        bgColor: 'bg-blue-500/10 border-blue-500/20',
        icon: `<svg class="w-5 h-5 text-blue-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>`,
        textColor: 'text-blue-400',
      },
    };

    const currentConfig = config[type] || config.info;

    toast.className = `
        pointer-events-auto transform transition-all duration-500 ease-out
        bg-gray-900/95 backdrop-blur-md border ${currentConfig.bgColor}
        rounded-xl px-4 py-3 shadow-2xl min-w-[320px]
        translate-x-full opacity-0 hover:scale-105
        group cursor-pointer relative overflow-hidden
    `;

    // Contenido del toast
    toast.innerHTML = `
        <div class="flex items-start gap-3">
            <div class="mt-0.5">
                ${currentConfig.icon}
            </div>
            <div class="flex-1 min-w-0">
                <p class="text-white font-medium text-sm leading-relaxed pr-2">
                    ${message}
                </p>
            </div>
            <button onclick="removeToast(this)" 
                    class="text-gray-500 hover:text-white transition-colors duration-200 flex-shrink-0 opacity-0 group-hover:opacity-100 ml-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="absolute bottom-0 left-0 h-1 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-b-xl transition-all duration-5000 ease-linear progress-bar" style="width: 100%"></div>
    `;

    // ID único para el toast
    toast.id = `toast-${Date.now()}`;

    // Agregar al contenedor
    toastContainer.appendChild(toast);

    // Animar entrada
    requestAnimationFrame(() => {
      toast.classList.remove('translate-x-full', 'opacity-0');
      toast.classList.add('translate-x-0', 'opacity-100');

      // Animar barra de progreso
      /** @type {HTMLElement | null} */
      const progressBar = toast.querySelector('.progress-bar');
      setTimeout(() => {
        if (progressBar) {
          (progressBar as HTMLElement).style.width = '0%';
        }
      }, 100);
    });

    // Pausar al hover
    let isPaused = false;
    /** @type {number | undefined} */
    let timeoutId: ReturnType<typeof setTimeout> | undefined;

    const startRemovalTimer = () => {
      if (isPaused) return;
      timeoutId = setTimeout(() => {
        removeToastElement(toast);
      }, 5000);
    };

    const pauseTimer = () => {
      isPaused = true;
      if (timeoutId) clearTimeout(timeoutId);
      /** @type {HTMLElement | null} */
      const progressBar = toast.querySelector('.progress-bar');
      if (progressBar) {
        (progressBar as HTMLElement).style.animationPlayState = 'paused';
      }
    };

    const resumeTimer = () => {
      isPaused = false;
      /** @type {HTMLElement | null} */
      const progressBar = toast.querySelector('.progress-bar');
      if (progressBar) {
        (progressBar as HTMLElement).style.animationPlayState = 'running';
      }
      startRemovalTimer();
    };

    toast.addEventListener('mouseenter', pauseTimer);
    toast.addEventListener('mouseleave', resumeTimer);

    // Click para cerrar
    toast.addEventListener('click', () => removeToastElement(toast));

    // Iniciar timer
    startRemovalTimer();
  }

  // Función para remover toast
  /**
   * @param {HTMLDivElement} toast - El elemento toast a remover
   */
  function removeToastElement(toast: HTMLDivElement): void {
    if (!toast.parentNode) return;

    toast.classList.add('translate-x-full', 'opacity-0', 'scale-95');
    setTimeout(() => {
      if (toast.parentNode) {
        toast.remove();
      }

      // Remover contenedor si está vacío
      /** @type {HTMLDivElement | null} */
      const container = document.getElementById('toast-container');
      if (container && container.children.length === 0) {
        container.remove();
      }
    }, 300);
  }

  // Función global para remover desde el botón
  /**
   * @param {HTMLButtonElement} button - El botón de cerrar
   */
  function removeToast(button: HTMLButtonElement): void {
    /** @type {HTMLDivElement | null} */
    const toast = button.closest('[id^="toast-"]') as HTMLDivElement | null;
    if (toast) {
      removeToastElement(toast);
    }
  }

  // Inicializar cuando el DOM esté listo - igual que el original
  document.addEventListener('DOMContentLoaded', initContactForm);

  // También inicializar si el DOM ya está listo
  if (document.readyState !== 'loading') {
    initContactForm();
  }

  // Demo temporal - remover después de probar
  // Uncomment para probar las notificaciones:
  /*
setTimeout(() => {
    console.log('Probando notificaciones...');
    showToast('success', '¡Formulario funcionando perfectamente! 🚀');
    setTimeout(() => showToast('info', 'ℹ️ Sistema de notificaciones personalizado activado'), 1000);
    setTimeout(() => showToast('error', '❌ Ejemplo de notificación de error'), 2000);
}, 3000);
*/
</script>
